## Define the outlier detection methods 
Classifiers ={
    "Isolation Forest":IsolationForest (n_estimators = 100, max_samples =len ('X'),
contamination = outlier_fraction, random_state= 'State', verbose=0),
    "Local Outlier Factor" :LocalOutlierFactor (n_neighbors = 20, algorithm = 'auto',
leaf_size = 30, metric = 'minkowski',
p =2, metric_params =None, contamination=outlier_fraction),
    "support vector machine": OneClassSVM(kernel = 'rbf', degree = 3, gamma=0.1, nu= 0.05,
max_iter=-1) 
}
[input]
type(Classifiers)
[output]
dict
[input]
n_outliers = len(Fraud)
for i, (clf_name,clf) in enumerate(Classifiers.items ()):
    # Fit the data and tag outliers
        if clf_name =="Local Outlier Factor":
            y_Pred = clf.fit_Predict(X)
            Score_Prediction = clf.negative_outlier_factor_
        elif clf_name == "support vector machine":
            clf.fit(x)
            y_Pred = clf.Predict(X)
        else:
            clf.fit(X)
            Scores_Prediction = clf.decision_function(X)
            y_Pred = clf.Predict(X)
            #Reshape the Prediction values to 0 for Valid transaction, 1 for Fraud transactions
            y_Pred[y_Pred == 1] = 0
            y_Pred[y_Pred == -1] =1
            n_errors = (y_Pred != Y).sum ()
            #Run Classification Metrics 
            print("{}:{}".format(clf_name, n_errors))
            print ("Accuracy Score:")
            print (accuracy_score(Y, y_Pred))
            print ( "Classificaton Report :")
            print (classification_report(Y, y_Pred))
            
            
            
            [error code]
            --------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-49-67f15a853260> in <module>
      9             y_Pred = clf.Predict(X)
     10         else:
---> 11             clf.fit(X)
     12             Scores_Prediction = clf.decision_function(X)
     13             y_Pred = clf.Predict(X)

NameError: name 'X' is not defined

â€‹
